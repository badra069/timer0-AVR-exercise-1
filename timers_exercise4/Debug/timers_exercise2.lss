
timers_exercise2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000748  000007dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800068  00800068  000007e4  2**0
                  ALLOC
  3 .stab         000012c0  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014c5  00000000  00000000  00001aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002f69  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY
  7 .debug_info   0000052e  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000004e7  00000000  00000000  000034e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001a  00000000  00000000  000039cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001af  00000000  00000000  000039e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 6b 03 	jmp	0x6d6	; 0x6d6 <__vector_8>
  24:	0c 94 13 02 	jmp	0x426	; 0x426 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e4       	ldi	r30, 0x48	; 72
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  8a:	0c 94 a2 03 	jmp	0x744	; 0x744 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <toggle>:
/*********************************************************************************
 * 									APPLICATION									 *
 *********************************************************************************/
uint8 DELAY_DONE;
void toggle(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
	// toggle the led
	g_t0tick--;
  9a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_t0tick>
  9e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <g_t0tick+0x1>
  a2:	01 97       	sbiw	r24, 0x01	; 1
  a4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <g_t0tick+0x1>
  a8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_t0tick>
	if(!g_t0tick)
  ac:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <g_t0tick>
  b0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <g_t0tick+0x1>
  b4:	89 2b       	or	r24, r25
  b6:	19 f4       	brne	.+6      	; 0xbe <toggle+0x2c>
	{
		DELAY_DONE = TRUE;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <DELAY_DONE>
	}

}
  be:	00 00       	nop
  c0:	df 91       	pop	r29
  c2:	cf 91       	pop	r28
  c4:	08 95       	ret

000000c6 <TIMER0_delay_init>:
void TIMER0_delay_init(void)
{
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	27 97       	sbiw	r28, 0x07	; 7
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
	 * 			initial_value 0 -> 255
	 ***************************************************/



	TIMER0_configType TIMER0_configStruct = { 	TIMER0_NORMAL ,
  da:	27 e0       	ldi	r18, 0x07	; 7
  dc:	e0 e6       	ldi	r30, 0x60	; 96
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	ce 01       	movw	r24, r28
  e2:	01 96       	adiw	r24, 0x01	; 1
  e4:	dc 01       	movw	r26, r24
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	2a 95       	dec	r18
  ec:	e1 f7       	brne	.-8      	; 0xe6 <TIMER0_delay_init+0x20>
												TIMER0_F_CPU_1024 ,
												DISABLE ,
												ENABLE ,
												0 ,
												0};
		TIMER0_init(&TIMER0_configStruct);
  ee:	ce 01       	movw	r24, r28
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TIMER0_init>
		TIMER0_setCallBackOverflowMode(toggle);
  f6:	89 e4       	ldi	r24, 0x49	; 73
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	0e 94 e5 00 	call	0x1ca	; 0x1ca <TIMER0_setCallBackOverflowMode>

}
  fe:	00 00       	nop
 100:	27 96       	adiw	r28, 0x07	; 7
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	de bf       	out	0x3e, r29	; 62
 108:	0f be       	out	0x3f, r0	; 63
 10a:	cd bf       	out	0x3d, r28	; 61
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <TIMER0_delay>:
void TIMER0_delay(uint8 seconds)
{
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	1f 92       	push	r1
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	89 83       	std	Y+1, r24	; 0x01
	DELAY_DONE = FALSE;
 11e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <DELAY_DONE>
	g_t0tick = 30 * seconds; // for 30 overflow that will exit the timing after tick 30
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	88 2f       	mov	r24, r24
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	4e e1       	ldi	r20, 0x1E	; 30
 12a:	48 9f       	mul	r20, r24
 12c:	90 01       	movw	r18, r0
 12e:	49 9f       	mul	r20, r25
 130:	30 0d       	add	r19, r0
 132:	11 24       	eor	r1, r1
 134:	c9 01       	movw	r24, r18
 136:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <g_t0tick+0x1>
 13a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <g_t0tick>
	TIMER0_start(TIMER0_F_CPU_1024);
 13e:	85 e0       	ldi	r24, 0x05	; 5
 140:	0e 94 90 01 	call	0x320	; 0x320 <TIMER0_start>
}
 144:	00 00       	nop
 146:	0f 90       	pop	r0
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
int main(void)
{
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
	/*initializaiton code*/


	SET_BIT(DDRD , 0);
 156:	81 e3       	ldi	r24, 0x31	; 49
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	21 e3       	ldi	r18, 0x31	; 49
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	21 60       	ori	r18, 0x01	; 1
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	CLEAR_BIT(PORTD , 0);
 168:	82 e3       	ldi	r24, 0x32	; 50
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	22 e3       	ldi	r18, 0x32	; 50
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	2e 7f       	andi	r18, 0xFE	; 254
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	TIMER0_delay_init();
 17a:	0e 94 63 00 	call	0xc6	; 0xc6 <TIMER0_delay_init>
	while(TRUE)
	{
		/* Application code*/
		TIMER0_delay(3);
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	0e 94 89 00 	call	0x112	; 0x112 <TIMER0_delay>
		while(!DELAY_DONE){}
 184:	00 00       	nop
 186:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <DELAY_DONE>
 18a:	88 23       	and	r24, r24
 18c:	e1 f3       	breq	.-8      	; 0x186 <main+0x38>
		PORTD ^=(1 << PD0);
 18e:	82 e3       	ldi	r24, 0x32	; 50
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	22 e3       	ldi	r18, 0x32	; 50
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	f9 01       	movw	r30, r18
 198:	30 81       	ld	r19, Z
 19a:	21 e0       	ldi	r18, 0x01	; 1
 19c:	23 27       	eor	r18, r19
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
	}
 1a2:	ed cf       	rjmp	.-38     	; 0x17e <main+0x30>

000001a4 <TIMER0_setCallBackCompareMode>:

/*********************************************************************************
* 									Functions Definition						 *
 *********************************************************************************/
void TIMER0_setCallBackCompareMode(void (*a_ptr)(void))
{
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	00 d0       	rcall	.+0      	; 0x1aa <TIMER0_setCallBackCompareMode+0x6>
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	9a 83       	std	Y+2, r25	; 0x02
 1b0:	89 83       	std	Y+1, r24	; 0x01
	g_T0CompareInterruptFunc_ptr = a_ptr;
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	9a 81       	ldd	r25, Y+2	; 0x02
 1b6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__data_end+0x1>
 1ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
}
 1be:	00 00       	nop
 1c0:	0f 90       	pop	r0
 1c2:	0f 90       	pop	r0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <TIMER0_setCallBackOverflowMode>:

void TIMER0_setCallBackOverflowMode(void (*a_ptr)(void))
{
 1ca:	cf 93       	push	r28
 1cc:	df 93       	push	r29
 1ce:	00 d0       	rcall	.+0      	; 0x1d0 <TIMER0_setCallBackOverflowMode+0x6>
 1d0:	cd b7       	in	r28, 0x3d	; 61
 1d2:	de b7       	in	r29, 0x3e	; 62
 1d4:	9a 83       	std	Y+2, r25	; 0x02
 1d6:	89 83       	std	Y+1, r24	; 0x01
	g_T0OverflowInterruptFunc_ptr = a_ptr;
 1d8:	89 81       	ldd	r24, Y+1	; 0x01
 1da:	9a 81       	ldd	r25, Y+2	; 0x02
 1dc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <g_T0OverflowInterruptFunc_ptr+0x1>
 1e0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_T0OverflowInterruptFunc_ptr>
}
 1e4:	00 00       	nop
 1e6:	0f 90       	pop	r0
 1e8:	0f 90       	pop	r0
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	08 95       	ret

000001f0 <TIMER0_init>:

void TIMER0_init(const TIMER0_configType * config_ptr)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <TIMER0_init+0x6>
 1f6:	cd b7       	in	r28, 0x3d	; 61
 1f8:	de b7       	in	r29, 0x3e	; 62
 1fa:	9a 83       	std	Y+2, r25	; 0x02
 1fc:	89 83       	std	Y+1, r24	; 0x01
	/* setting the mode -> ctc , normal or pwm */
	TCCR0 = config_ptr->mode | ((config_ptr->output_mode) << COM00);
 1fe:	83 e5       	ldi	r24, 0x53	; 83
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	29 81       	ldd	r18, Y+1	; 0x01
 204:	3a 81       	ldd	r19, Y+2	; 0x02
 206:	f9 01       	movw	r30, r18
 208:	20 81       	ld	r18, Z
 20a:	42 2f       	mov	r20, r18
 20c:	29 81       	ldd	r18, Y+1	; 0x01
 20e:	3a 81       	ldd	r19, Y+2	; 0x02
 210:	f9 01       	movw	r30, r18
 212:	21 81       	ldd	r18, Z+1	; 0x01
 214:	22 2f       	mov	r18, r18
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	22 95       	swap	r18
 21a:	32 95       	swap	r19
 21c:	30 7f       	andi	r19, 0xF0	; 240
 21e:	32 27       	eor	r19, r18
 220:	20 7f       	andi	r18, 0xF0	; 240
 222:	32 27       	eor	r19, r18
 224:	24 2b       	or	r18, r20
 226:	fc 01       	movw	r30, r24
 228:	20 83       	st	Z, r18

	/* setting the initial values selected in the compare reg and counting reg (first of all)*/
	TCNT0 = config_ptr->initial_value;
 22a:	82 e5       	ldi	r24, 0x52	; 82
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	29 81       	ldd	r18, Y+1	; 0x01
 230:	3a 81       	ldd	r19, Y+2	; 0x02
 232:	f9 01       	movw	r30, r18
 234:	26 81       	ldd	r18, Z+6	; 0x06
 236:	fc 01       	movw	r30, r24
 238:	20 83       	st	Z, r18
	OCR0 = config_ptr->compare_value;
 23a:	8c e5       	ldi	r24, 0x5C	; 92
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	29 81       	ldd	r18, Y+1	; 0x01
 240:	3a 81       	ldd	r19, Y+2	; 0x02
 242:	f9 01       	movw	r30, r18
 244:	25 81       	ldd	r18, Z+5	; 0x05
 246:	fc 01       	movw	r30, r24
 248:	20 83       	st	Z, r18

	/* setting the force compare bit 0 according  to the mode of the timer*/
	if(config_ptr->mode == TIMER0_NORMAL || config_ptr->mode == TIMER0_CTC)
 24a:	89 81       	ldd	r24, Y+1	; 0x01
 24c:	9a 81       	ldd	r25, Y+2	; 0x02
 24e:	fc 01       	movw	r30, r24
 250:	80 81       	ld	r24, Z
 252:	88 23       	and	r24, r24
 254:	31 f0       	breq	.+12     	; 0x262 <TIMER0_init+0x72>
 256:	89 81       	ldd	r24, Y+1	; 0x01
 258:	9a 81       	ldd	r25, Y+2	; 0x02
 25a:	fc 01       	movw	r30, r24
 25c:	80 81       	ld	r24, Z
 25e:	88 30       	cpi	r24, 0x08	; 8
 260:	51 f4       	brne	.+20     	; 0x276 <TIMER0_init+0x86>
	{
		/* in case of non-pwm mode */
		SET_BIT(TCCR0 , FOC0);
 262:	83 e5       	ldi	r24, 0x53	; 83
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	23 e5       	ldi	r18, 0x53	; 83
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	f9 01       	movw	r30, r18
 26c:	20 81       	ld	r18, Z
 26e:	20 68       	ori	r18, 0x80	; 128
 270:	fc 01       	movw	r30, r24
 272:	20 83       	st	Z, r18
 274:	09 c0       	rjmp	.+18     	; 0x288 <TIMER0_init+0x98>
	}
	else
	{
		/* in case of a pwm mode */
		CLEAR_BIT(TCCR0 , FOC0);
 276:	83 e5       	ldi	r24, 0x53	; 83
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	23 e5       	ldi	r18, 0x53	; 83
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	f9 01       	movw	r30, r18
 280:	20 81       	ld	r18, Z
 282:	2f 77       	andi	r18, 0x7F	; 127
 284:	fc 01       	movw	r30, r24
 286:	20 83       	st	Z, r18
	}
	if(config_ptr->output_mode != TIMER0_NORMAL_OUTPUT )
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	fc 01       	movw	r30, r24
 28e:	81 81       	ldd	r24, Z+1	; 0x01
 290:	88 23       	and	r24, r24
 292:	91 f0       	breq	.+36     	; 0x2b8 <TIMER0_init+0xc8>
	{
		/* for the signal pwm output pin (if pwm mode configured only) */
		SET_BIT(DDRB , 3);
 294:	87 e3       	ldi	r24, 0x37	; 55
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	27 e3       	ldi	r18, 0x37	; 55
 29a:	30 e0       	ldi	r19, 0x00	; 0
 29c:	f9 01       	movw	r30, r18
 29e:	20 81       	ld	r18, Z
 2a0:	28 60       	ori	r18, 0x08	; 8
 2a2:	fc 01       	movw	r30, r24
 2a4:	20 83       	st	Z, r18
		CLEAR_BIT(PORTB , 3);
 2a6:	88 e3       	ldi	r24, 0x38	; 56
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	28 e3       	ldi	r18, 0x38	; 56
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	f9 01       	movw	r30, r18
 2b0:	20 81       	ld	r18, Z
 2b2:	27 7f       	andi	r18, 0xF7	; 247
 2b4:	fc 01       	movw	r30, r24
 2b6:	20 83       	st	Z, r18
	}
	/* setting the interrupt modes */
	TIMSK |= (config_ptr->overflow_interrupt << TOIE0) | ((config_ptr ->compare_interrupt)<<OCIE0);
 2b8:	89 e5       	ldi	r24, 0x59	; 89
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	29 e5       	ldi	r18, 0x59	; 89
 2be:	30 e0       	ldi	r19, 0x00	; 0
 2c0:	f9 01       	movw	r30, r18
 2c2:	20 81       	ld	r18, Z
 2c4:	42 2f       	mov	r20, r18
 2c6:	29 81       	ldd	r18, Y+1	; 0x01
 2c8:	3a 81       	ldd	r19, Y+2	; 0x02
 2ca:	f9 01       	movw	r30, r18
 2cc:	24 81       	ldd	r18, Z+4	; 0x04
 2ce:	52 2f       	mov	r21, r18
 2d0:	29 81       	ldd	r18, Y+1	; 0x01
 2d2:	3a 81       	ldd	r19, Y+2	; 0x02
 2d4:	f9 01       	movw	r30, r18
 2d6:	23 81       	ldd	r18, Z+3	; 0x03
 2d8:	22 2f       	mov	r18, r18
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	22 0f       	add	r18, r18
 2de:	33 1f       	adc	r19, r19
 2e0:	25 2b       	or	r18, r21
 2e2:	24 2b       	or	r18, r20
 2e4:	fc 01       	movw	r30, r24
 2e6:	20 83       	st	Z, r18

	/* starting the timer NOW after all settings is done*/
	TCCR0 |=config_ptr ->clock;
 2e8:	83 e5       	ldi	r24, 0x53	; 83
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	23 e5       	ldi	r18, 0x53	; 83
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	f9 01       	movw	r30, r18
 2f2:	40 81       	ld	r20, Z
 2f4:	29 81       	ldd	r18, Y+1	; 0x01
 2f6:	3a 81       	ldd	r19, Y+2	; 0x02
 2f8:	f9 01       	movw	r30, r18
 2fa:	22 81       	ldd	r18, Z+2	; 0x02
 2fc:	24 2b       	or	r18, r20
 2fe:	fc 01       	movw	r30, r24
 300:	20 83       	st	Z, r18

	/* enabling the global interrupt */
	GLOBAL_INTERRUPT_ENABLE();
 302:	8f e5       	ldi	r24, 0x5F	; 95
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	2f e5       	ldi	r18, 0x5F	; 95
 308:	30 e0       	ldi	r19, 0x00	; 0
 30a:	f9 01       	movw	r30, r18
 30c:	20 81       	ld	r18, Z
 30e:	20 68       	ori	r18, 0x80	; 128
 310:	fc 01       	movw	r30, r24
 312:	20 83       	st	Z, r18
}
 314:	00 00       	nop
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <TIMER0_start>:

void TIMER0_start(TIMER0_clock clk)
{
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	1f 92       	push	r1
 326:	cd b7       	in	r28, 0x3d	; 61
 328:	de b7       	in	r29, 0x3e	; 62
 32a:	89 83       	std	Y+1, r24	; 0x01
	/* setting the prescaler thus enabling the clock then initializing the counter */
	TCCR0 |= clk;
 32c:	83 e5       	ldi	r24, 0x53	; 83
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	23 e5       	ldi	r18, 0x53	; 83
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	f9 01       	movw	r30, r18
 336:	30 81       	ld	r19, Z
 338:	29 81       	ldd	r18, Y+1	; 0x01
 33a:	23 2b       	or	r18, r19
 33c:	fc 01       	movw	r30, r24
 33e:	20 83       	st	Z, r18
	TCNT0 = 0;
 340:	82 e5       	ldi	r24, 0x52	; 82
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	fc 01       	movw	r30, r24
 346:	10 82       	st	Z, r1
}
 348:	00 00       	nop
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret

00000352 <TIMER0_setCompareValue>:


void TIMER0_setCompareValue(uint8 value)
{
 352:	cf 93       	push	r28
 354:	df 93       	push	r29
 356:	1f 92       	push	r1
 358:	cd b7       	in	r28, 0x3d	; 61
 35a:	de b7       	in	r29, 0x3e	; 62
 35c:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = value;
 35e:	8c e5       	ldi	r24, 0x5C	; 92
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	29 81       	ldd	r18, Y+1	; 0x01
 364:	fc 01       	movw	r30, r24
 366:	20 83       	st	Z, r18
}
 368:	00 00       	nop
 36a:	0f 90       	pop	r0
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <TIMER0_stop>:

void TIMER0_stop(void)
{
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	cd b7       	in	r28, 0x3d	; 61
 378:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0 , 0);
 37a:	83 e5       	ldi	r24, 0x53	; 83
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	23 e5       	ldi	r18, 0x53	; 83
 380:	30 e0       	ldi	r19, 0x00	; 0
 382:	f9 01       	movw	r30, r18
 384:	20 81       	ld	r18, Z
 386:	2e 7f       	andi	r18, 0xFE	; 254
 388:	fc 01       	movw	r30, r24
 38a:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR0 , 1);
 38c:	83 e5       	ldi	r24, 0x53	; 83
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	23 e5       	ldi	r18, 0x53	; 83
 392:	30 e0       	ldi	r19, 0x00	; 0
 394:	f9 01       	movw	r30, r18
 396:	20 81       	ld	r18, Z
 398:	2d 7f       	andi	r18, 0xFD	; 253
 39a:	fc 01       	movw	r30, r24
 39c:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR0 , 2);
 39e:	83 e5       	ldi	r24, 0x53	; 83
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	23 e5       	ldi	r18, 0x53	; 83
 3a4:	30 e0       	ldi	r19, 0x00	; 0
 3a6:	f9 01       	movw	r30, r18
 3a8:	20 81       	ld	r18, Z
 3aa:	2b 7f       	andi	r18, 0xFB	; 251
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
}
 3b0:	00 00       	nop
 3b2:	df 91       	pop	r29
 3b4:	cf 91       	pop	r28
 3b6:	08 95       	ret

000003b8 <__vector_19>:

/*********************************************************************************
* 								Interrupt service routines							 *
 *********************************************************************************/
ISR(TIMER0_COMP_vect)
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	2f 93       	push	r18
 3c6:	3f 93       	push	r19
 3c8:	4f 93       	push	r20
 3ca:	5f 93       	push	r21
 3cc:	6f 93       	push	r22
 3ce:	7f 93       	push	r23
 3d0:	8f 93       	push	r24
 3d2:	9f 93       	push	r25
 3d4:	af 93       	push	r26
 3d6:	bf 93       	push	r27
 3d8:	ef 93       	push	r30
 3da:	ff 93       	push	r31
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	/* the corresponding interrupt service routine function (IF EXIST) will be executed*/
	if(g_T0CompareInterruptFunc_ptr != NULL)
 3e4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 3e8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 3ec:	89 2b       	or	r24, r25
 3ee:	31 f0       	breq	.+12     	; 0x3fc <__vector_19+0x44>
	{
		g_T0CompareInterruptFunc_ptr();
 3f0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 3f4:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 3f8:	fc 01       	movw	r30, r24
 3fa:	09 95       	icall
	}
}
 3fc:	00 00       	nop
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	ff 91       	pop	r31
 404:	ef 91       	pop	r30
 406:	bf 91       	pop	r27
 408:	af 91       	pop	r26
 40a:	9f 91       	pop	r25
 40c:	8f 91       	pop	r24
 40e:	7f 91       	pop	r23
 410:	6f 91       	pop	r22
 412:	5f 91       	pop	r21
 414:	4f 91       	pop	r20
 416:	3f 91       	pop	r19
 418:	2f 91       	pop	r18
 41a:	0f 90       	pop	r0
 41c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 420:	0f 90       	pop	r0
 422:	1f 90       	pop	r1
 424:	18 95       	reti

00000426 <__vector_9>:


ISR(TIMER0_OVF_vect)
{
 426:	1f 92       	push	r1
 428:	0f 92       	push	r0
 42a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 42e:	0f 92       	push	r0
 430:	11 24       	eor	r1, r1
 432:	2f 93       	push	r18
 434:	3f 93       	push	r19
 436:	4f 93       	push	r20
 438:	5f 93       	push	r21
 43a:	6f 93       	push	r22
 43c:	7f 93       	push	r23
 43e:	8f 93       	push	r24
 440:	9f 93       	push	r25
 442:	af 93       	push	r26
 444:	bf 93       	push	r27
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	cd b7       	in	r28, 0x3d	; 61
 450:	de b7       	in	r29, 0x3e	; 62
	/* the corresponding interrupt service routine function (IF EXIST) will be executed*/
	if(g_T0OverflowInterruptFunc_ptr != NULL)
 452:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_T0OverflowInterruptFunc_ptr>
 456:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_T0OverflowInterruptFunc_ptr+0x1>
 45a:	89 2b       	or	r24, r25
 45c:	31 f0       	breq	.+12     	; 0x46a <__stack+0xb>
	{
		g_T0OverflowInterruptFunc_ptr();
 45e:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_T0OverflowInterruptFunc_ptr>
 462:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <g_T0OverflowInterruptFunc_ptr+0x1>
 466:	fc 01       	movw	r30, r24
 468:	09 95       	icall
	}
}
 46a:	00 00       	nop
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	ff 91       	pop	r31
 472:	ef 91       	pop	r30
 474:	bf 91       	pop	r27
 476:	af 91       	pop	r26
 478:	9f 91       	pop	r25
 47a:	8f 91       	pop	r24
 47c:	7f 91       	pop	r23
 47e:	6f 91       	pop	r22
 480:	5f 91       	pop	r21
 482:	4f 91       	pop	r20
 484:	3f 91       	pop	r19
 486:	2f 91       	pop	r18
 488:	0f 90       	pop	r0
 48a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 48e:	0f 90       	pop	r0
 490:	1f 90       	pop	r1
 492:	18 95       	reti

00000494 <TIMER1_setCallBackCompareMode>:
/*********************************************************************************
 * 								Function Definitions							 *
 *********************************************************************************/

void TIMER1_setCallBackCompareMode(void (*a_ptr)(void))
{
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <TIMER1_setCallBackCompareMode+0x6>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	9a 83       	std	Y+2, r25	; 0x02
 4a0:	89 83       	std	Y+1, r24	; 0x01
	g_T1CompareInterruptFunc_ptr = a_ptr;
 4a2:	89 81       	ldd	r24, Y+1	; 0x01
 4a4:	9a 81       	ldd	r25, Y+2	; 0x02
 4a6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <g_T1CompareInterruptFunc_ptr+0x1>
 4aa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <g_T1CompareInterruptFunc_ptr>
}
 4ae:	00 00       	nop
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	08 95       	ret

000004ba <TIMER1_setCallBackOverflowMode>:

void TIMER1_setCallBackOverflowMode(void (*a_ptr)(void))
{
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	00 d0       	rcall	.+0      	; 0x4c0 <TIMER1_setCallBackOverflowMode+0x6>
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	9a 83       	std	Y+2, r25	; 0x02
 4c6:	89 83       	std	Y+1, r24	; 0x01
	g_T1OverflowInterruptFunc_ptr = a_ptr;
 4c8:	89 81       	ldd	r24, Y+1	; 0x01
 4ca:	9a 81       	ldd	r25, Y+2	; 0x02
 4cc:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <g_T1OverflowInterruptFunc_ptr+0x1>
 4d0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <g_T1OverflowInterruptFunc_ptr>
}
 4d4:	00 00       	nop
 4d6:	0f 90       	pop	r0
 4d8:	0f 90       	pop	r0
 4da:	df 91       	pop	r29
 4dc:	cf 91       	pop	r28
 4de:	08 95       	ret

000004e0 <TIMER1_init>:

void TIMER1_init(const TIMER1_configType * config_ptr)
{
 4e0:	cf 93       	push	r28
 4e2:	df 93       	push	r29
 4e4:	00 d0       	rcall	.+0      	; 0x4e6 <TIMER1_init+0x6>
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	9a 83       	std	Y+2, r25	; 0x02
 4ec:	89 83       	std	Y+1, r24	; 0x01
	/* setting the mode -> ctc , normal and setting FOC1A,B by zero as no pwm option here */
	TCCR1A = (1 << FOC1A) | (1 << FOC1B) | (config_ptr->mode & 0xFF);
 4ee:	8f e4       	ldi	r24, 0x4F	; 79
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	29 81       	ldd	r18, Y+1	; 0x01
 4f4:	3a 81       	ldd	r19, Y+2	; 0x02
 4f6:	f9 01       	movw	r30, r18
 4f8:	20 81       	ld	r18, Z
 4fa:	31 81       	ldd	r19, Z+1	; 0x01
 4fc:	2c 60       	ori	r18, 0x0C	; 12
 4fe:	fc 01       	movw	r30, r24
 500:	20 83       	st	Z, r18

	/* setting the mode -> ctc , normal */
	TCCR1B = (config_ptr->mode >> 8);
 502:	8e e4       	ldi	r24, 0x4E	; 78
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	29 81       	ldd	r18, Y+1	; 0x01
 508:	3a 81       	ldd	r19, Y+2	; 0x02
 50a:	f9 01       	movw	r30, r18
 50c:	20 81       	ld	r18, Z
 50e:	31 81       	ldd	r19, Z+1	; 0x01
 510:	23 2f       	mov	r18, r19
 512:	33 27       	eor	r19, r19
 514:	fc 01       	movw	r30, r24
 516:	20 83       	st	Z, r18

	/* setting the initial values selected in the compare reg and counting reg (first of all)*/
	TCNT1 = config_ptr->initial_value;
 518:	8c e4       	ldi	r24, 0x4C	; 76
 51a:	90 e0       	ldi	r25, 0x00	; 0
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	3a 81       	ldd	r19, Y+2	; 0x02
 520:	f9 01       	movw	r30, r18
 522:	27 81       	ldd	r18, Z+7	; 0x07
 524:	30 85       	ldd	r19, Z+8	; 0x08
 526:	fc 01       	movw	r30, r24
 528:	31 83       	std	Z+1, r19	; 0x01
 52a:	20 83       	st	Z, r18

	/*here we use OCR1A only for comparison , we don't need the second OCR1B */
	OCR1A = config_ptr->compare_value;
 52c:	8a e4       	ldi	r24, 0x4A	; 74
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	29 81       	ldd	r18, Y+1	; 0x01
 532:	3a 81       	ldd	r19, Y+2	; 0x02
 534:	f9 01       	movw	r30, r18
 536:	25 81       	ldd	r18, Z+5	; 0x05
 538:	36 81       	ldd	r19, Z+6	; 0x06
 53a:	fc 01       	movw	r30, r24
 53c:	31 83       	std	Z+1, r19	; 0x01
 53e:	20 83       	st	Z, r18

	/* setting the interrupt modes */
	TIMSK |= (config_ptr->overflow_interrupt << TOIE1) | ((config_ptr ->compare_interrupt)<<OCIE1A);
 540:	89 e5       	ldi	r24, 0x59	; 89
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	29 e5       	ldi	r18, 0x59	; 89
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	f9 01       	movw	r30, r18
 54a:	20 81       	ld	r18, Z
 54c:	42 2f       	mov	r20, r18
 54e:	29 81       	ldd	r18, Y+1	; 0x01
 550:	3a 81       	ldd	r19, Y+2	; 0x02
 552:	f9 01       	movw	r30, r18
 554:	24 81       	ldd	r18, Z+4	; 0x04
 556:	22 2f       	mov	r18, r18
 558:	30 e0       	ldi	r19, 0x00	; 0
 55a:	22 0f       	add	r18, r18
 55c:	33 1f       	adc	r19, r19
 55e:	22 0f       	add	r18, r18
 560:	33 1f       	adc	r19, r19
 562:	52 2f       	mov	r21, r18
 564:	29 81       	ldd	r18, Y+1	; 0x01
 566:	3a 81       	ldd	r19, Y+2	; 0x02
 568:	f9 01       	movw	r30, r18
 56a:	23 81       	ldd	r18, Z+3	; 0x03
 56c:	22 2f       	mov	r18, r18
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	22 95       	swap	r18
 572:	32 95       	swap	r19
 574:	30 7f       	andi	r19, 0xF0	; 240
 576:	32 27       	eor	r19, r18
 578:	20 7f       	andi	r18, 0xF0	; 240
 57a:	32 27       	eor	r19, r18
 57c:	25 2b       	or	r18, r21
 57e:	24 2b       	or	r18, r20
 580:	fc 01       	movw	r30, r24
 582:	20 83       	st	Z, r18

	/* starting the timer NOW after all settings is done*/
	TCCR1B |=config_ptr ->clock;
 584:	8e e4       	ldi	r24, 0x4E	; 78
 586:	90 e0       	ldi	r25, 0x00	; 0
 588:	2e e4       	ldi	r18, 0x4E	; 78
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	f9 01       	movw	r30, r18
 58e:	40 81       	ld	r20, Z
 590:	29 81       	ldd	r18, Y+1	; 0x01
 592:	3a 81       	ldd	r19, Y+2	; 0x02
 594:	f9 01       	movw	r30, r18
 596:	22 81       	ldd	r18, Z+2	; 0x02
 598:	24 2b       	or	r18, r20
 59a:	fc 01       	movw	r30, r24
 59c:	20 83       	st	Z, r18

	/* enabling the global interrupt */
	GLOBAL_INTERRUPT_ENABLE();
 59e:	8f e5       	ldi	r24, 0x5F	; 95
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	2f e5       	ldi	r18, 0x5F	; 95
 5a4:	30 e0       	ldi	r19, 0x00	; 0
 5a6:	f9 01       	movw	r30, r18
 5a8:	20 81       	ld	r18, Z
 5aa:	20 68       	ori	r18, 0x80	; 128
 5ac:	fc 01       	movw	r30, r24
 5ae:	20 83       	st	Z, r18
}
 5b0:	00 00       	nop
 5b2:	0f 90       	pop	r0
 5b4:	0f 90       	pop	r0
 5b6:	df 91       	pop	r29
 5b8:	cf 91       	pop	r28
 5ba:	08 95       	ret

000005bc <TIMER1_start>:

void TIMER1_start(TIMER1_clock clk)
{
 5bc:	cf 93       	push	r28
 5be:	df 93       	push	r29
 5c0:	1f 92       	push	r1
 5c2:	cd b7       	in	r28, 0x3d	; 61
 5c4:	de b7       	in	r29, 0x3e	; 62
 5c6:	89 83       	std	Y+1, r24	; 0x01
	/* setting the prescaler thus enabling the clock then initializing the counter */
	TCCR1B |= clk;
 5c8:	8e e4       	ldi	r24, 0x4E	; 78
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	2e e4       	ldi	r18, 0x4E	; 78
 5ce:	30 e0       	ldi	r19, 0x00	; 0
 5d0:	f9 01       	movw	r30, r18
 5d2:	30 81       	ld	r19, Z
 5d4:	29 81       	ldd	r18, Y+1	; 0x01
 5d6:	23 2b       	or	r18, r19
 5d8:	fc 01       	movw	r30, r24
 5da:	20 83       	st	Z, r18
	TCNT1 = 0;
 5dc:	8c e4       	ldi	r24, 0x4C	; 76
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	fc 01       	movw	r30, r24
 5e2:	11 82       	std	Z+1, r1	; 0x01
 5e4:	10 82       	st	Z, r1
}
 5e6:	00 00       	nop
 5e8:	0f 90       	pop	r0
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	08 95       	ret

000005f0 <TIMER1_setCompareValue>:


void TIMER1_setCompareValue(uint16 value)
{
 5f0:	cf 93       	push	r28
 5f2:	df 93       	push	r29
 5f4:	00 d0       	rcall	.+0      	; 0x5f6 <TIMER1_setCompareValue+0x6>
 5f6:	cd b7       	in	r28, 0x3d	; 61
 5f8:	de b7       	in	r29, 0x3e	; 62
 5fa:	9a 83       	std	Y+2, r25	; 0x02
 5fc:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = value;
 5fe:	8a e4       	ldi	r24, 0x4A	; 74
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	29 81       	ldd	r18, Y+1	; 0x01
 604:	3a 81       	ldd	r19, Y+2	; 0x02
 606:	fc 01       	movw	r30, r24
 608:	31 83       	std	Z+1, r19	; 0x01
 60a:	20 83       	st	Z, r18
}
 60c:	00 00       	nop
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	df 91       	pop	r29
 614:	cf 91       	pop	r28
 616:	08 95       	ret

00000618 <TIMER1_stop>:

void TIMER1_stop(void)
{
 618:	cf 93       	push	r28
 61a:	df 93       	push	r29
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR1B , 0);
 620:	8e e4       	ldi	r24, 0x4E	; 78
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	2e e4       	ldi	r18, 0x4E	; 78
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	f9 01       	movw	r30, r18
 62a:	20 81       	ld	r18, Z
 62c:	2e 7f       	andi	r18, 0xFE	; 254
 62e:	fc 01       	movw	r30, r24
 630:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B , 1);
 632:	8e e4       	ldi	r24, 0x4E	; 78
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	2e e4       	ldi	r18, 0x4E	; 78
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	f9 01       	movw	r30, r18
 63c:	20 81       	ld	r18, Z
 63e:	2d 7f       	andi	r18, 0xFD	; 253
 640:	fc 01       	movw	r30, r24
 642:	20 83       	st	Z, r18
	CLEAR_BIT(TCCR1B , 2);
 644:	8e e4       	ldi	r24, 0x4E	; 78
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	2e e4       	ldi	r18, 0x4E	; 78
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	f9 01       	movw	r30, r18
 64e:	20 81       	ld	r18, Z
 650:	2b 7f       	andi	r18, 0xFB	; 251
 652:	fc 01       	movw	r30, r24
 654:	20 83       	st	Z, r18
}
 656:	00 00       	nop
 658:	df 91       	pop	r29
 65a:	cf 91       	pop	r28
 65c:	08 95       	ret

0000065e <__vector_6>:
/*********************************************************************************
 * 								interrupt service routines						 *
 *********************************************************************************/

ISR(TIMER1_COMPA_vect)
{
 65e:	1f 92       	push	r1
 660:	0f 92       	push	r0
 662:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 666:	0f 92       	push	r0
 668:	11 24       	eor	r1, r1
 66a:	2f 93       	push	r18
 66c:	3f 93       	push	r19
 66e:	4f 93       	push	r20
 670:	5f 93       	push	r21
 672:	6f 93       	push	r22
 674:	7f 93       	push	r23
 676:	8f 93       	push	r24
 678:	9f 93       	push	r25
 67a:	af 93       	push	r26
 67c:	bf 93       	push	r27
 67e:	ef 93       	push	r30
 680:	ff 93       	push	r31
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	cd b7       	in	r28, 0x3d	; 61
 688:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
 68a:	8c e4       	ldi	r24, 0x4C	; 76
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	fc 01       	movw	r30, r24
 690:	11 82       	std	Z+1, r1	; 0x01
 692:	10 82       	st	Z, r1
	/* the corresponding interrupt service routine function (IF EXIST) will be executed*/
	if(g_T1CompareInterruptFunc_ptr != NULL)
 694:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <g_T1CompareInterruptFunc_ptr>
 698:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <g_T1CompareInterruptFunc_ptr+0x1>
 69c:	89 2b       	or	r24, r25
 69e:	31 f0       	breq	.+12     	; 0x6ac <__vector_6+0x4e>
	{
		g_T1CompareInterruptFunc_ptr();
 6a0:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <g_T1CompareInterruptFunc_ptr>
 6a4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <g_T1CompareInterruptFunc_ptr+0x1>
 6a8:	fc 01       	movw	r30, r24
 6aa:	09 95       	icall
	}
}
 6ac:	00 00       	nop
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	ff 91       	pop	r31
 6b4:	ef 91       	pop	r30
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <__vector_8>:


ISR(TIMER1_OVF_vect)
{
 6d6:	1f 92       	push	r1
 6d8:	0f 92       	push	r0
 6da:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6de:	0f 92       	push	r0
 6e0:	11 24       	eor	r1, r1
 6e2:	2f 93       	push	r18
 6e4:	3f 93       	push	r19
 6e6:	4f 93       	push	r20
 6e8:	5f 93       	push	r21
 6ea:	6f 93       	push	r22
 6ec:	7f 93       	push	r23
 6ee:	8f 93       	push	r24
 6f0:	9f 93       	push	r25
 6f2:	af 93       	push	r26
 6f4:	bf 93       	push	r27
 6f6:	ef 93       	push	r30
 6f8:	ff 93       	push	r31
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
 6fe:	cd b7       	in	r28, 0x3d	; 61
 700:	de b7       	in	r29, 0x3e	; 62
	/* the corresponding interrupt service routine function (IF EXIST) will be executed*/
	if(g_T1OverflowInterruptFunc_ptr != NULL)
 702:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <g_T1OverflowInterruptFunc_ptr>
 706:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <g_T1OverflowInterruptFunc_ptr+0x1>
 70a:	89 2b       	or	r24, r25
 70c:	31 f0       	breq	.+12     	; 0x71a <__vector_8+0x44>
	{
		g_T1OverflowInterruptFunc_ptr();
 70e:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <g_T1OverflowInterruptFunc_ptr>
 712:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <g_T1OverflowInterruptFunc_ptr+0x1>
 716:	fc 01       	movw	r30, r24
 718:	09 95       	icall
	}
}
 71a:	00 00       	nop
 71c:	df 91       	pop	r29
 71e:	cf 91       	pop	r28
 720:	ff 91       	pop	r31
 722:	ef 91       	pop	r30
 724:	bf 91       	pop	r27
 726:	af 91       	pop	r26
 728:	9f 91       	pop	r25
 72a:	8f 91       	pop	r24
 72c:	7f 91       	pop	r23
 72e:	6f 91       	pop	r22
 730:	5f 91       	pop	r21
 732:	4f 91       	pop	r20
 734:	3f 91       	pop	r19
 736:	2f 91       	pop	r18
 738:	0f 90       	pop	r0
 73a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 73e:	0f 90       	pop	r0
 740:	1f 90       	pop	r1
 742:	18 95       	reti

00000744 <_exit>:
 744:	f8 94       	cli

00000746 <__stop_program>:
 746:	ff cf       	rjmp	.-2      	; 0x746 <__stop_program>
